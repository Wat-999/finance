#获取股票基本数据后，还要根据基本变量生成衍生变量。这里关心的是前10分钟成交量的涨跌幅，而不是成交量本身。本小节将介绍成交量涨跌幅的两种计算公式
#并穿插着介绍如何计算通过Tushare库获取的股价涨跌幅数据及5日均线数据(ma5）
#成交量涨跌幅的计算公式有两种：一种是根据当日成交量和昨日成交量来计算涨跌幅；另一种是根据当日成交量和多日成交量的均值来计算涨跌幅
#公式1：成交量涨幅=(当日10分钟成交量-昨日10分钟成交量)/昨日10分钟成交量 *100%  代码如下：
stock_table['昨日10分钟成交量'] = stock_table['10分钟成交量'].shift(-1)  #这里的10分钟变量即当日10分钟成交量
stock_table['成交量涨跌幅1(%)'] = (stock_table['10分钟成交量']-stock_table['昨日10分钟成交量'])/stock_table['昨日10分钟成交量']*100

#其中，stock_table['10分钟成较量'].shift(-1)是将原来的一列数据向上偏移一行获得新的一列，如果把-1改为-2，则是偏移2行
#注意因为10分钟成交量那一列向上偏移了一行，所以最后一行的"昨日10分钟成交量"和"成交量涨跌幅1(%)"是缺失，如下图所示。
#在运行上述代码时，可能会弹出settingWithCopyWarning的警告信息，警告不是报错，并不会影响程序运行效果。如果不想看到警告信息，可以在代码的最前面
#加上如下代码来屏蔽警告信息。
import warnings
warnings.filterwarnings('ignore')

#股价涨跌幅也可以用上述方法计算，只需把"10分钟成交量"改为"收盘价"、"昨日10分钟成交量"改为"昨日收盘价"即可，
#其计算结果和通过Tushare库获取的股价涨幅是一样的，代码如下：
stock_table['昨日收盘价'] = stock_table['收盘价'].shift(-1)
stock_table['股价涨跌幅'] = (stock_table['收盘价']-stock_table['昨日收盘价'])/stock_table['昨日收盘价']*100

#公式2：根据当日成交量和多日成交量的均值计算涨跌幅： 成交量涨跌幅 =(10分钟成交量-10分钟成交量10日均值）/10分钟成交量10日均值 *100
ten_mean = stock_table['10分钟成交量'].sort_index().rolling(10).mean()
stock_table['10分钟成交量10日均值'] = ten_mean
stock_table['成交量涨跌幅2(%)'] = (stock_table['10分钟成交量']-stock_table['10分钟成交量10日均值'])
#上述先通过sort_index()函数将日期从近到远排序，然后通过rolling(10).mean()计算出10分钟成交量的10日均值数据，如果把"10"改为"5"，
#则可计算5日均值数据。需要注意的是如果直接用stock_table['10分钟成交量].rolling(10).mean()来计算10日均值数据，而不先通过sort_index()函数排序
#会导致最近10天的数据缺失，这是因为Tushare库导出的数据按由近到远的时间顺序排序，rolling(10).mean()是从下往上求均值的，
#而最近10天的数据量不足以支撑10日均值。例如'2019-04-01'行从下往上数只有1个数据，无法求10日均值。所以需要先通过sort_index()函数进行升序排序
#再求均值。此时最近10天的均值数据可以计算出来，但最开始但10天但均值数据则会缺失

#如果想让最开始的10天也有均值数据，可一在rolling(10)里设置min_periods参数，代码如下
ten_mean = stock_table['10分钟成交量'].sort_index().rolling(10, min_periods=1)
#min_periods=1为最小的求均值的数据量，也就是说，即使只有一个数据，也满足求均值的数据量，如果有两个数据，则按照2个数据求均值，
#如果有满足rolling(10)的数据量，则按照10个数据求均值。这样最开始10天就有均值数据了。如打印结果，其中"2019-02-01"行只有1天的数据，
#所以其均值就是其本身

#公式2的计算结果有时更准确。因为如果连续2天都是大额成交量(如10万手)，用公式1计算，会导致第2天的成交量涨跌幅为0，而用公式2则能较好地反映出更具有实际意义

#Tushare库提供的5日均线数据(ma5)也是铜鼓类似方式获取的，只要将"10分钟成交量"改为收盘价即可，代码如下：
ma5 = stock_table['收盘价'].sort_index().rolling(5).mean()
stock_table['ma5'] = ma5

#通过相关性分析选取合适的衍生变量
#上面通过两种方式计算出量10分钟成交量的涨跌幅数据，分别为"成交量涨跌幅1(%)和"成交量涨跌幅2(%)"这两个数据中哪一个与股价涨跌幅的相关性更大呢？
#可以使用相关性分析知识点，来分析变量之间的相关性，从而选取合适的衍生变量

#首先回顾一下皮尔逊相关系数
from scipy.stats import pearsonr
corr = pearsonr(x, y)
#它可以返回两个数值：相关系数r值和显著性水平p值。相关系数r值在[-1,1]之间，为整数表示正相关，为负数则表示负相关，绝对值越大相关性越高。
#P值是显著性，与皮尔逊相关显著性检验有关，p<0.05时表示显著相关，即真的具有相关性，而不是偶然因素导致的

#成交量涨跌幅1(%)和股价涨跌幅(%)相关性分析
from scipy.stats import pearsonr
corr = pearsonr(abs(stock_table['股价涨幅(%)'][:-1]), abs(stock_table['成交量涨跌幅1(%)'][:-1]))
print('相关系数R值为' + str(corr[0]) + ', 显著性水平P值为' + str(corr[1]))
#打印结果：r=0.3027 p=0.0727
#相关系数r值为0.3，但是显著性水平p值为0.07,大于0.05，也就是说这两个变量的相关性并不显著，不过因为0.007也只是稍大于0.05，所以两者还是有一些相关性的
#因为我们关心的是涨跌幅的绝对值，所以这里用abs()函数取绝对值，上面也提到过"成交量涨跌幅1(%)在2019-02-01是没有数据的，所有得通过[:-1]的方式
#来选取除来表格最后一行的数据。[:-1]表示选取从第一个元素到倒数第一个元素，因为切片"左闭右开"的特性，倒数第一个元素取不到。
#如果想选取从第一个元素到倒数第10个元素，把-1改成-10即可.


#2成交量涨跌幅2(%)和股价涨跌幅(%)相关分析
from scipy.stats import pearsonr
corr = pearsonr(abs(stock_table['股价涨幅(%)']), abs(stock_table['成交量涨跌幅2(%)']))
print('相关系数R值为' + str(corr[0]) + ', 显著性水平P值为' + str(corr[1]))
#因为上面通过rolling()函数计算10日均值时设置了min_periods=1，最后缺少的10行数据被自动补上了，，所以这里不需要加[:-10]来做切片筛选
#相关系数r值为0.42，P值为0.009
#显著性水平p值为0.009,小于0.05，也就是说这两个变量具有显著的相关性。相关系数r值为0.42，也大于"成交量涨跌幅1(%)和股价涨跌幅(%)"相关系数r值。
#所以，通过公式2获得的衍生变量非常有参考价值，在之后的分析中也主要采用该衍生变量。
#可以看到，前10分钟的成交量涨跌幅对股价涨跌幅是有一定影响力的，座椅在实际投资决策中，可以将其作为一个重要的参考因子。
#因为影响相关分析的因素很多，例如，选取不同的股票交易时间或不同股票进行分析，都可能得出不同的结果，所以还需要结合其他参考因子做投资分析。